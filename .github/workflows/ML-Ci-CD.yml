name: MLflow CI/CD

on:
  push:
    branches:
      - dev/model

jobs:
  train-and-register:
    runs-on: ubuntu-latest

    steps:
      # 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v2

      # AWS 자격 증명 설정
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Python 설정
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      # Python 패키지 캐싱
      - name: Cache Python dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('ML/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 의존성 설치
      - name: Install dependencies
        run: pip install -r ML/requirements.txt

      # 환경 변수 설정 및 .env 파일 생성
      - name: Create .env file
        run: |
          echo "MLFLOW_SERVER_URI=${{ secrets.MLFLOW_SERVER_URI }}" > ML/ml.env
          echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}" >> ML/ml.env

      # 모델 학습 및 등록 실행
      - name: Run MLflow Training
        working-directory: ML
        run: python mlflow_training.py

      # 모델 등록 후 서빙 서버 확장
      - name: Scale MLflow Serving Containers (Zero Downtime)
        run: |
          # 먼저 새로운 서버를 추가하고, 기존 서버는 점진적으로 종료
          docker-compose -f /home/ubuntu/mlflow_project/test_model/docker-compose.yml up -d --scale mlflow-serving=2
          # 기존 서버를 다운
          docker-compose -f /home/ubuntu/mlflow_project/test_model/docker-compose.yml down
