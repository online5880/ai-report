# name: Django CI/CD with Slack Notification

# on:
#   push:
#     branches:
#       - dev/web

# env:
#   ECS_TASK_DEFINITION: ecs-task

# jobs:
#   build-and-push-ecr:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: 도커 이미지 빌드
#         run: docker build -t ai-report-web:latest -f ./WEB/Dockerfile ./WEB

#       - name: AWS Credential 인증
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Amazon ECR 로그인 및 이미지 푸시
#         run: |
#           aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
#           docker tag ai-report-web:latest ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest
#           docker tag ai-report-web:latest ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
#           docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest
#           docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

#   deploy-to-ecs:
#     needs: build-and-push-ecr
#     runs-on: ubuntu-latest
#     steps:
#       - name: AWS Credential 인증
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: ECS Task 다운로드
#         run: |
#           aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
#           --query taskDefinition > task-definition.json

#       - name: ECS Task 업데이트
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: task-definition.json
#           container-name: team-01-ecr
#           image: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

#       - name: Store current task definition for rollback
#         run: |
#           aws ecs describe-services \
#             --cluster ${{ secrets.ECS_CLUSTER }} \
#             --services ${{ secrets.ECS_SERVICE }} \
#             --query 'services[0].taskDefinition' \
#             --output text > previous-task-def.txt

#       - name: ECS 서비스의 기존 작업을 종료 (desired-count 0으로 설정)
#         run: |
#           aws ecs update-service \
#             --cluster ${{ secrets.ECS_CLUSTER }} \
#             --service ${{ secrets.ECS_SERVICE }} \
#             --desired-count 0

#       - name: ECS 배포
#         id: deploy
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: ${{ secrets.ECS_SERVICE }}
#           cluster: ${{ secrets.ECS_CLUSTER }}
#           wait-for-service-stability: true

#       # ECS 서비스의 작업을 다시 시작 (desired-count를 원래 값으로 복원)
#       - name: Restart ECS service tasks (desired-count 1)
#         run: |
#           aws ecs update-service \
#             --cluster ${{ secrets.ECS_CLUSTER }} \
#             --service ${{ secrets.ECS_SERVICE }} \
#             --desired-count 1

#       - name: 실패 시 롤백
#         if: failure()
#         run: |
#           aws ecs update-service \
#             --cluster ${{ secrets.ECS_CLUSTER }} \
#             --service ${{ secrets.ECS_SERVICE }} \
#             --task-definition $(cat previous-task-def.txt) \
#             --force-new-deployment

#       - name: EC2에 연결하고 Dockerized Django 앱 배포
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ${{ secrets.EC2_USERNAME }}
#           key: ${{ secrets.EC2_KEY }}
#           port: 22
#           script: |
#             aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
#             docker pull ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

#             cd /home/ubuntu/django

#             docker-compose pull
#             docker-compose up -d --no-deps --build django_1
#             sleep 10
#             docker-compose up -d --no-deps --build django_2
#             sleep 10
#             docker-compose up -d --no-deps --build django_3
#             sleep 10

#   notify-slack:
#     needs: [build-and-push-ecr, deploy-to-ecs]
#     runs-on: ubuntu-latest
#     if: always()
#     steps:
#       - name: Notify Slack
#         env:
#           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#           GITHUB_REF_NAME: ${{ github.ref_name }}
#         run: |
#           if [[ "${{ needs.build-and-push-ecr.result }}" == "failure" ]]; then
#             STATUS="❌ 빌드 및 ECR 푸시"
#             COLOR="#ff0000"
#           elif [[ "${{ needs.deploy-to-ecs.result }}" == "failure" ]]; then
#             STATUS="❌ ECS 배포 실패"
#             COLOR="#ff0000"
#           else
#             STATUS="✅ 성공"
#             COLOR="#2eb886"
#           fi

#           curl -X POST -H 'Content-type: application/json' --data "{
#             \"attachments\": [
#               {
#                 \"color\": \"${COLOR}\",
#                 \"blocks\": [
#                   {
#                     \"type\": \"header\",
#                     \"text\": {
#                       \"type\": \"plain_text\",
#                       \"text\": \"🤖 CI/CD 결과 알림\",
#                       \"emoji\": true
#                     }
#                   },
#                   {
#                     \"type\": \"section\",
#                     \"fields\": [
#                       {
#                         \"type\": \"mrkdwn\",
#                         \"text\": \"*📋 결과 상태:*\n${STATUS}\"
#                       },
#                       {
#                         \"type\": \"mrkdwn\",
#                         \"text\": \"*🛠️ 브랜치:*\n\`${GITHUB_REF_NAME}\`\"
#                       }
#                     ]
#                   }
#                 ]
#               }
#             ]
#           }" $SLACK_WEBHOOK_URL