name: Django CI/CD with Slack Notification

on:
  push:
    branches:
      - main

env:
  ECR_REGISTRY: 339712929315.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_REPOSITORY: bigdata/team-01
  AWS_REGION: ap-northeast-2

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

  build-and-test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker Image
        run: |
          docker build -t ai-report-web:latest -f WEB/Dockerfile WEB --cache-from=type=local,src=/tmp/.buildx-cache

      - name: Wait for Services to be Ready
        working-directory: WEB
        run: |
          docker-compose up --build -d
          max_retry=30
          wait_interval=2
          for i in $(seq 1 $max_retry); do
            if docker-compose exec -T web python manage.py check; then
              break
            fi
            sleep $wait_interval
          done

      - name: Run Tests
        working-directory: WEB
        run: docker-compose exec -T web python manage.py test --parallel --keepdb

      - name: Cleanup Services
        working-directory: WEB
        run: docker-compose down

  push-to-ecr:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build and Tag Docker Image
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest -f WEB/Dockerfile WEB

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

  deploy-to-ecs:
    needs: push-to-ecr
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: team-01-ecr
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ecs-service
          cluster: team-01-ecs
          wait-for-service-stability: true

  notify-slack:
    needs: [build-and-test, push-to-ecr, deploy-to-ecs]
    runs-on: ubuntu-latest
    steps:
      - name: Notify Slack
        run: |
          BUILD_STATUS=${{ needs.build-and-test.result }}
          PUSH_STATUS=${{ needs.push-to-ecr.result }}
          DEPLOY_STATUS=${{ needs.deploy-to-ecs.result }}

          curl -X POST -H 'Content-type: application/json' --data "{
            \"text\": \":robot_face: *CI/CD 결과 알림*\\n\\n📋 *빌드 상태:* $BUILD_STATUS\\n📦 *푸시 상태:* $PUSH_STATUS\\n🚀 *배포 상태:* $DEPLOY_STATUS\\n\\n🤖 _항상 열심히 일하는 로봇입니다!_ 🦾\"
          }" ${{ secrets.SLACK_WEBHOOK_URL }}
