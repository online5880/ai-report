name: Django CI/CD with Slack Notification

on:
  push:
    branches:
      - dev/web  # dev/web 브랜치로 푸시될 때 실행

env:
  ECR_REGISTRY: 339712929315.dkr.ecr.ap-northeast-2.amazonaws.com  # ECR 레지스트리
  ECR_REPOSITORY: bigdata/team-01  # ECR 저장소 이름
  AWS_REGION: ap-northeast-2  # AWS 리전
  ECS_CLUSTER: team-01-ecs  # ECS 클러스터
  ECS_SERVICE: ecs-service  # ECS 서비스
  ECS_TASK_DEFINITION: ecs-task  # ECS 작업 정의
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}  # Slack 웹훅 URL

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkit-inline-cache: true

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker Image (for test)
        run: |
          docker build -t ai-report-web:latest -f WEB/Dockerfile WEB
          docker images

      - name: Create env file dynamically
        run: |
          echo "SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" > WEB/web.env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> WEB/web.env
          echo "DB_USER=${{ secrets.DB_USER }}" >> WEB/web.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> WEB/web.env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> WEB/web.env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> WEB/web.env
        shell: bash

      - name: Cleanup Docker Container
        if: always()
        run: |
          docker rm -f ai-report-test || true

  push-to-ecr:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push to ECR
        uses: docker/build-push-action@v5
        with:
          context: WEB
          file: WEB/Dockerfile
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

  deploy-to-ecs:
    needs: push-to-ecr
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # ECS 서비스의 기존 작업을 종료 (desired-count 0으로 설정)
      - name: Stop ECS service tasks (desired-count 0)
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --desired-count 0

      # ECS Task Definition 다운로드
      - name: Download ECS Task Definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json

      # ECS Task Definition 업데이트 (새로운 이미지 사용)
      - name: Update ECS Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: team-01-ecr
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      # ECS 서비스에 새로운 작업 배포
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      # ECS 서비스의 작업을 다시 시작 (desired-count를 원래 값으로 복원)
      - name: Restart ECS service tasks (desired-count 1)
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --desired-count 1

      - name: Connect to EC2 and deploy Dockerized Django app
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: 22
          script: |
            # ECR 로그인
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

            # 최신 이미지 pull
            docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

            # docker-compose 점진적 무중단 업데이트
            cd /home/ubuntu/django
            docker-compose up -d --build django_1
            docker-compose up -d --build django_2
            docker-compose up -d --build django_3




  notify-slack:
    needs: [build-and-test, push-to-ecr, deploy-to-ecs]
    runs-on: ubuntu-latest
    if: always()  # 항상 실행
    steps:
      - name: Notify Slack
        run: |
          if [[ "${{ needs.build-and-test.result }}" == "failure" ]]; then
            STATUS="❌ 빌드 및 테스트 실패"
            COLOR="#ff0000"
          elif [[ "${{ needs.push-to-ecr.result }}" == "failure" ]]; then
            STATUS="❌ ECR 푸시 실패"
            COLOR="#ff0000"
          elif [[ "${{ needs.deploy-to-ecs.result }}" == "failure" ]]; then
            STATUS="❌ ECS 배포 실패"
            COLOR="#ff0000"
          else
            STATUS="✅ 성공"
            COLOR="#2eb886"
          fi

          curl -X POST -H 'Content-type: application/json' --data "{
            \"attachments\": [
              {
                \"color\": \"${COLOR}\",
                \"blocks\": [
                  {
                    \"type\": \"header\",
                    \"text\": {
                      \"type\": \"plain_text\",
                      \"text\": \"🤖 CI/CD 결과 알림\",
                      \"emoji\": true
                    }
                  },
                  {
                    \"type\": \"section\",
                    \"fields\": [
                      {
                        \"type\": \"mrkdwn\",
                        \"text\": \"*📋 결과 상태:*\n${STATUS}\"
                      },
                      {
                        \"type\": \"mrkdwn\",
                        \"text\": \"*🛠️ 브랜치:*\n\`${{ github.ref_name }}\`\"
                      }
                    ]
                  }
                ]
              }
            ]
          }" ${{ secrets.SLACK_WEBHOOK_URL }}
