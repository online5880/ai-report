name: Django CI/CD with Slack Notification

on:
  push:
    branches:
      - main

env:
  ECR_REGISTRY: 339712929315.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_REPOSITORY: bigdata/team-01
  AWS_REGION: ap-northeast-2
  ECS_CLUSTER: team-01-ecs
  ECS_SERVICE: ecs-service
  ECS_TASK_DEFINITION: ecs-task

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build Docker Image
        run: |
          docker build -t ai-report-web:latest -f WEB/Dockerfile WEB
          docker images

      - name: Wait for Services to be Ready
        working-directory: WEB
        run: |
          docker-compose up --build -d
          docker-compose wait

      - name: Run Tests
        working-directory: WEB
        run: |
          set -e
          docker-compose exec -T web python manage.py test --parallel --keepdb

      - name: Cleanup Services
        working-directory: WEB
        run: docker-compose down

  push-to-ecr:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build and Tag Docker Image
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest -f WEB/Dockerfile WEB

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

  deploy-to-ecs:
    needs: push-to-ecr
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download ECS Task Definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json

      - name: Update ECS Task Definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: team-01-ecr
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  notify-slack:
    needs: [build-and-test, push-to-ecr, deploy-to-ecs]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Slack
        run: |
          STATUS="성공"
          if [[ ${{ job.status }} != 'success' ]]; then
            STATUS="실패"
          fi

          curl -X POST -H 'Content-type: application/json' --data "{
            \"text\": \":robot_face: *CI/CD 결과 알림*\",
            \"attachments\": [
              {
                \"color\": \"$([[ ${{ job.status }} == 'success' ]] && echo 'good' || echo 'danger')\",
                \"fields\": [
                  {\"title\": \"결과 상태\", \"value\": \"$STATUS\", \"short\": true},
                  {\"title\": \"Workflow\", \"value\": \"Django CI/CD\", \"short\": true},
                  {\"title\": \"브랜치\", \"value\": \"${{ github.ref_name }}\", \"short\": true}
                ]
              }
            ]
          }" ${{ secrets.SLACK_WEBHOOK_URL }}
