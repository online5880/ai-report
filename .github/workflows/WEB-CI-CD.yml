name: Django CI/CD with Slack Notification

on:
  push:
    branches:
      - dev/web

env:
  ECS_TASK_DEFINITION: ecs-task

jobs:
  build-and-push-ecr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build Docker image
        run: docker build -t ai-report-web:latest -f ./WEB/Dockerfile ./WEB

      - name: Authenticate AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR and push image
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
          docker tag ai-report-web:latest ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest
          docker tag ai-report-web:latest ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

  deploy-to-ecs:
    needs: build-and-push-ecr
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download ECS Task Definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json

      - name: Clean ECS Task Definition
        run: |
          jq 'del(.enableFaultInjection, .compatibilities, .revision, .taskDefinitionArn, .requiresAttributes, .status, .registeredAt, .registeredBy)' task-definition.json > task-definition-cleaned.json

      - name: Render ECS Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-cleaned.json
          container-name: team-01-ecr
          image: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Store current task definition for rollback
        run: |
          aws ecs describe-services \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --services ${{ secrets.ECS_SERVICE }} \
            --query 'services[0].taskDefinition' \
            --output text > previous-task-def.txt

      - name: Stop ECS Service Tasks
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --desired-count 0

      - name: Deploy ECS Service
        id: deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Restart ECS Service Tasks
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --desired-count 1

      - name: Rollback on failure
        if: failure()
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --task-definition $(cat previous-task-def.txt) \
            --force-new-deployment

      - name: Deploy Dockerized Django App to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: 22
          script: |
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
            docker pull ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

            cd /home/ubuntu/django

            docker-compose pull
            docker-compose up -d --no-deps --build django_1
            sleep 10
            docker-compose up -d --no-deps --build django_2
            sleep 10
            docker-compose up -d --no-deps --build django_3
            sleep 10

  notify-slack:
    needs: [build-and-push-ecr, deploy-to-ecs]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
        run: |
          if [[ "${{ needs.build-and-push-ecr.result }}" == "failure" ]]; then
            STATUS="‚ùå ÎπåÎìú Î∞è ECR Ìë∏Ïãú"
            COLOR="#ff0000"
          elif [[ "${{ needs.deploy-to-ecs.result }}" == "failure" ]]; then
            STATUS="‚ùå ECS Î∞∞Ìè¨ Ïã§Ìå®"
            COLOR="#ff0000"
          else
            STATUS="‚úÖ ÏÑ±Í≥µ"
            COLOR="#2eb886"
          fi

          curl -X POST -H 'Content-type: application/json' --data "{
            \"attachments\": [
              {
                \"color\": \"${COLOR}\",
                \"blocks\": [
                  {
                    \"type\": \"header\",
                    \"text\": {
                      \"type\": \"plain_text\",
                      \"text\": \"ü§ñ CI/CD Í≤∞Í≥º ÏïåÎ¶º\",
                      \"emoji\": true
                    }
                  },
                  {
                    \"type\": \"section\",
                    \"fields\": [
                      {
                        \"type\": \"mrkdwn\",
                        \"text\": \"*üìã Í≤∞Í≥º ÏÉÅÌÉú:*\n${STATUS}\"
                      },
                      {
                        \"type\": \"mrkdwn\",
                        \"text\": \"*üõ†Ô∏è Î∏åÎûúÏπò:*\n\`${GITHUB_REF_NAME}\`\"
                      }
                    ]
                  }
                ]
              }
            ]
          }" $SLACK_WEBHOOK_URL
