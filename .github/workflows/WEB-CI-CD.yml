name: Django CI/CD with Slack Notification

on:
  push:
    branches:
      - dev/web  # dev/web Î∏åÎûúÏπòÎ°ú Ìë∏ÏãúÎê† Îïå Ïã§Ìñâ

env:
  ECR_REGISTRY: 339712929315.dkr.ecr.ap-northeast-2.amazonaws.com  # ECR Î†àÏßÄÏä§Ìä∏Î¶¨
  ECR_REPOSITORY: bigdata/team-01  # ECR Ï†ÄÏû•ÏÜå Ïù¥Î¶Ñ
  AWS_REGION: ap-northeast-2  # AWS Î¶¨Ï†Ñ
  ECS_CLUSTER: team-01-ecs  # ECS ÌÅ¥Îü¨Ïä§ÌÑ∞
  ECS_SERVICE: ecs-service  # ECS ÏÑúÎπÑÏä§
  ECS_TASK_DEFINITION: ecs-task  # ECS ÏûëÏóÖ Ï†ïÏùò
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}  # Slack ÏõπÌõÖ URL

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkit-inline-cache: true

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker Image (for test)
        run: |
          docker build -t ai-report-web:latest -f WEB/Dockerfile WEB
          docker images

      - name: Create env file dynamically
        run: |
          echo "SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" > WEB/web.env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> WEB/web.env
          echo "DB_USER=${{ secrets.DB_USER }}" >> WEB/web.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> WEB/web.env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> WEB/web.env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> WEB/web.env
        shell: bash

      - name: Cleanup Docker Container
        if: always()
        run: |
          docker rm -f ai-report-test || true

  push-to-ecr:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push to ECR
        uses: docker/build-push-action@v5
        with:
          context: WEB
          file: WEB/Dockerfile
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

  deploy-to-ecs:
    needs: push-to-ecr
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS Service with new image
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment \
            --image ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}


  notify-slack:
    needs: [build-and-test, push-to-ecr, deploy-to-ecs]
    runs-on: ubuntu-latest
    if: always()  # Ìï≠ÏÉÅ Ïã§Ìñâ
    steps:
      - name: Notify Slack
        run: |
          if [[ "${{ needs.build-and-test.result }}" == "failure" ]]; then
            STATUS="‚ùå ÎπåÎìú Î∞è ÌÖåÏä§Ìä∏ Ïã§Ìå®"
            COLOR="#ff0000"
          elif [[ "${{ needs.push-to-ecr.result }}" == "failure" ]]; then
            STATUS="‚ùå ECR Ìë∏Ïãú Ïã§Ìå®"
            COLOR="#ff0000"
          elif [[ "${{ needs.deploy-to-ecs.result }}" == "failure" ]]; then
            STATUS="‚ùå ECS Î∞∞Ìè¨ Ïã§Ìå®"
            COLOR="#ff0000"
          else
            STATUS="‚úÖ ÏÑ±Í≥µ"
            COLOR="#2eb886"
          fi

          curl -X POST -H 'Content-type: application/json' --data "{
            \"attachments\": [
              {
                \"color\": \"${COLOR}\",
                \"blocks\": [
                  {
                    \"type\": \"header\",
                    \"text\": {
                      \"type\": \"plain_text\",
                      \"text\": \"ü§ñ CI/CD Í≤∞Í≥º ÏïåÎ¶º\",
                      \"emoji\": true
                    }
                  },
                  {
                    \"type\": \"section\",
                    \"fields\": [
                      {
                        \"type\": \"mrkdwn\",
                        \"text\": \"*üìã Í≤∞Í≥º ÏÉÅÌÉú:*\n${STATUS}\"
                      },
                      {
                        \"type\": \"mrkdwn\",
                        \"text\": \"*üõ†Ô∏è Î∏åÎûúÏπò:*\n\`${{ github.ref_name }}\`\"
                      }
                    ]
                  }
                ]
              }
            ]
          }" ${{ secrets.SLACK_WEBHOOK_URL }}
