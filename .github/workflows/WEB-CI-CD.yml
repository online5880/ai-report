name: Django CI/CD with Slack Notification

on:
  push:
    branches:
      - main

env:
  ECR_REGISTRY: 339712929315.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_REPOSITORY: bigdata/team-01
  AWS_REGION: ap-northeast-2
  ECS_CLUSTER: team-01-ecs
  ECS_SERVICE: ecs-service
  ECS_TASK_DEFINITION: ecs-task

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r WEB/requirements.txt

      - name: Run Linters
        run: |
          pip install flake8 black
          flake8 WEB
          black --check WEB

      - name: Run Selective Tests
        working-directory: WEB
        run: |
          python manage.py test core.tests.critical_tests --parallel 2

  build-and-push:
    needs: lint-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.11.2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: WEB
          file: WEB/Dockerfile
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy-to-ecs:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download and Update Task Definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --query taskDefinition > task-definition.json

          aws ecs register-task-definition \
            --cli-input-json file://task-definition.json

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment

  notify-slack:
    needs: [lint-and-test, build-and-push, deploy-to-ecs]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Slack
        run: |
          STATUS="성공"
          if [[ ${{ job.status }} != 'success' ]]; then
            STATUS="실패"
          fi

          curl -X POST -H 'Content-type: application/json' --data "{
            \"text\": \":robot_face: *CI/CD 결과 알림*\\n\\n📋 *결과 상태:* $STATUS\\n\\n🚀 *Workflow:* Django CI/CD\\n🛠️ *브랜치:* ${{ github.ref_name }}\\n\\n🤖 _항상 열심히 일하는 로봇입니다!_ 🦾\"
          }" ${{ secrets.SLACK_WEBHOOK_URL }}