name: Django CI and Push to ECR

on:
  push:
    branches:
      - main
  workflow_run:
    workflows:
      - "Notify Slack on Push"  # Slack 워크플로우 이름
    types:
      - completed

env:
  ECR_REGISTRY: 339712929315.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_REPOSITORY: bigdata/team-01
  AWS_REGION: ap-northeast-2

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # 코드 체크아웃
      - uses: actions/checkout@v4

      # Docker 빌드 캐시 설정
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Docker 설정
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Docker Compose 설치
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Docker 이미지 빌드
      - name: Build Docker Image
        run: |
          docker build -t ai-report-web:latest -f WEB/Dockerfile WEB
          docker images

      # 서비스 시작 및 준비 상태 확인
      - name: Wait for Services to be Ready
        working-directory: WEB
        run: |
          docker-compose up --build -d
          max_retry=30
          wait_interval=2
          for i in $(seq 1 $max_retry); do
            if docker-compose exec -T web python manage.py check; then
              break
            fi
            sleep $wait_interval
          done

      # Django 테스트 실행 (병렬 실행)
      - name: Run Tests
        working-directory: WEB
        run: |
          docker-compose exec -T web python manage.py test --parallel --keepdb

      # 서비스 정리
      - name: Cleanup Services
        run: docker-compose down

  push-to-ecr:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      # 코드 체크아웃
      - uses: actions/checkout@v4

      # AWS 인증 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Docker 설정
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # 태그 생성 (커밋 해시, 빌드 번호, 날짜 조합)
      - name: Generate Tags
        id: tags
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BUILD_NUMBER=${{ github.run_number }}

          echo "::set-output name=short_sha::$SHORT_SHA"
          echo "::set-output name=timestamp::$TIMESTAMP"
          echo "::set-output name=build_number::$BUILD_NUMBER"

      # Docker 이미지 빌드 및 태깅
      - name: Build and Tag Docker Image
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest \
                       -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.tags.outputs.short_sha }} \
                       -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:build-${{ steps.tags.outputs.build_number }} \
                       -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.tags.outputs.timestamp }} \
                       -f WEB/Dockerfile WEB

      # Amazon ECR 로그인
      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      # Docker 이미지 ECR로 푸시
      - name: Push Docker Image to ECR
        run: |
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.tags.outputs.short_sha }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:build-${{ steps.tags.outputs.build_number }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.tags.outputs.timestamp }}